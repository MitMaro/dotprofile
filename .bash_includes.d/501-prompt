#!/bin/bash
: '
Personal .profile - Command Prompt Setup
By: Tim Oram
#'

# warn on missing git
if [ ! `type -t git-rev-parse` ]; then
	__DEBUG_MESSAGE "git-rev-parse mising, git prompt disabled."
fi

___check_git() {
	local base_dir
	base_dir=$(git-rev-parse --show-cdup 2>/dev/null) || return 1
	echo -e "$COLOR_GREEN(${COLOR_YELLOW}GIT$COLOR_GREEN) "
}

___check_git_branch_info() {
	local base_dir modified_count

	base_dir=$(git-rev-parse --show-cdup 2>/dev/null) || return 1
	
	modified_count=`git status --porcelain -uno | wc -l`
	if (( $modified_count > 0 )); then
		echo -e "  $COLOR_GREEN($COLOR_RED$(__git_ps1 "%s")$COLOR_GREEN)"
	else
		echo -e "  $COLOR_GREEN($COLOR_LIGHT_GREY$(__git_ps1 "%s")$COLOR_GREEN)"
	fi
	
}

# prompt message for unfinished tasks
__tasks_prompt() {
	
	if [ ! `type -t tasks` ]; then
		return
	fi
	
	local task
	local task_count
	local rand=$((RANDOM%$__TASKS_SHOW_PROBABILITY+1)) 
	
	# only show the message 1 out of __TASKS_SHOW_PROBABILITY times
	if [ $rand -eq 1 ]; then
		task_count=`t | wc -l | sed -e's/ *//'`
		
		# no tasks, no point showing anything
		if [ $task_count -eq 0 ]; then
			return
		fi
		
		# pick a random number
		rand=$((RANDOM%$task_count+1))
		
		# get a random task
		task=`head -$rand $__TASKS_LIST_DIR/$__TASKS_LIST_FILE | tail -1 | awk -F"|" '{print \$1}'`
		
		# show a message on that task
		echo -e "$__TASK_PROMPT_PREFIX${__TASKS_COLOR_NORMAL}Have you forgotten about the task: $COLOR_YELLOW"\
$task "$__TASKS_COLOR_NORMAL?$__TASKS_COLOR_RESET$__TASK_PROMPT_POSTFIX"
		
	fi
}

# coloured task counts
__tasks_ps1() {

        if [ ! `type -t tasks` ]; then
                return
        fi
	
	# default color
	local color=$__TASKS_DEFAULT_COUNT_COLOR;
	local task_count=`t | wc -l | sed -e's/ *//'`
	
	# if no tasks, do nothing
	if (( $task_count < 1 )); then
		return
	fi
	
	# Show different colors depending on number of tasks not complete.
	if (( $task_count > $__TASKS_HIGH_COUNT_LIMIT )); then
		color=$__TASKS_HIGH_COUNT_COLOR;
	elif (( $task_count > $__TASKS_MEDIUM_COUNT_LIMIT )); then
		color=$__TASKS_MEDIUM_COUNT_COLOR;
	elif (( $task_count > $__TASKS_LOW_COUNT_LIMIT )); then
		color=$__TASKS_LOW_COUNT_COLOR;
	fi
	
	# add an 's' if more than one task
	if (( $task_count == 1 )); then
		echo -e "$__TASKS_COLOR_NORMAL$__TASK_PS1_PREFIX$color$task_count Task$__TASKS_COLOR_NORMAL in $__TASKS_LIST_FILE$__TASKS_COLOR_NORMAL$__TASK_PS1_POSTFIX$__TASKS_COLOR_RESET"
	else
		echo -e "$__TASKS_COLOR_NORMAL$__TASK_PS1_PREFIX$color$task_count Tasks$__TASKS_COLOR_NORMAL in $__TASKS_LIST_FILE$__TASKS_COLOR_NORMAL$__TASK_PS1_POSTFIX$__TASKS_COLOR_RESET"
	fi
}

___prompt_setup() {
	local EXITSTATUS="$?" user_color prompt_color prompt_symbol
	
	if [[ $UID -eq 0 ]]; then
		user_color=$COLOR_RED
	else
		user_color=$COLOR_DARK_CYAN
	fi
	prompt_color=$COLOR_GREEN
	
	if [[ $EXITSTATUS -eq 0 ]]; then
		prompt_symbol="\n\[$COLOR_YELLOW\]:)"
	else
		prompt_symbol="\n\[$COLOR_RED\]:("
	fi
	PS1="\[$prompt_color\]\$(___check_git)\[$user_color\]\u \[$prompt_color\]\
\w (\$(ls -1 | wc -l | sed 's: ::g') files)\$(___check_git_branch_info)\
\$(__tasks_ps1)\$(__tasks_prompt)\[$prompt_color\] $prompt_symbol\[$COLOR_NORMAL\] "
	
}

PROMPT_COMMAND="___prompt_setup;"$PROMPT_COMMAND
	
